/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.firkin.kstreams.normalizer.errors.v1.avsc;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Model of a normalized error that may arise from a variety of sources. Errors should be mapped to this schema. */
@org.apache.avro.specific.AvroGenerated
public class NormalizedError extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1808661964533584327L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"NormalizedError\",\"namespace\":\"io.firkin.kstreams.normalizer.errors.v1.avsc\",\"doc\":\"Model of a normalized error that may arise from a variety of sources. Errors should be mapped to this schema.\",\"fields\":[{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"The timestamp of when the error occurred, in Unix epoch time UTC (required)\"},{\"name\":\"event_datetime\",\"type\":{\"type\":\"string\",\"logicalType\":\"datetime\"},\"doc\":\"The datetime of when the error occured, in GMT (required)\"},{\"name\":\"correlation_id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"},\"doc\":\"Unique id for event tracing (required)\"},{\"name\":\"environment_id\",\"type\":[\"null\",\"string\"],\"doc\":\"Environment where the error took place (optional)\",\"default\":null},{\"name\":\"application_id\",\"type\":[\"null\",\"string\"],\"doc\":\"Application where the error took place (optional)\",\"default\":null},{\"name\":\"instance_id\",\"type\":[\"null\",\"string\"],\"doc\":\"Instance where the error took place (optional)\",\"default\":null},{\"name\":\"environment\",\"type\":{\"type\":\"enum\",\"name\":\"Environments\",\"doc\":\"Environment where the error took place.\",\"symbols\":[\"DEV\",\"QA\",\"STG\",\"PRD\"]}},{\"name\":\"exception\",\"type\":\"string\",\"doc\":\"Error information from the application\"},{\"name\":\"metadata\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}],\"doc\":\"Metadata from the source system (optional)\",\"default\":null},{\"name\":\"data\",\"type\":[\"null\",\"bytes\"],\"doc\":\"Data from the source system (optional)\",\"default\":null},{\"name\":\"kafka_metadata\",\"type\":{\"type\":\"map\",\"values\":\"string\"},\"doc\":\"Metadata from the Kafka Record (required)\",\"default\":{}},{\"name\":\"kafka_record\",\"type\":{\"type\":\"map\",\"values\":\"bytes\"},\"doc\":\"The Record responsible for the error (required)\",\"default\":{}},{\"name\":\"kafka_schema\",\"type\":{\"type\":\"map\",\"values\":\"string\"},\"doc\":\"Schema of the Record (required)\",\"default\":{}},{\"name\":\"kafka_data\",\"type\":{\"type\":\"map\",\"values\":\"bytes\"},\"doc\":\"Additional data from Kafka (required)\",\"default\":{}},{\"name\":\"related_metadata\",\"type\":{\"type\":\"map\",\"values\":\"string\"},\"doc\":\"Additional metadata from related systems (required)\",\"default\":{}},{\"name\":\"related_data\",\"type\":{\"type\":\"map\",\"values\":\"bytes\"},\"doc\":\"Additional data from related systems (required)\",\"default\":{}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<NormalizedError> ENCODER =
      new BinaryMessageEncoder<NormalizedError>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<NormalizedError> DECODER =
      new BinaryMessageDecoder<NormalizedError>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<NormalizedError> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<NormalizedError> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<NormalizedError> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<NormalizedError>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this NormalizedError to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a NormalizedError from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a NormalizedError instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static NormalizedError fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The timestamp of when the error occurred, in Unix epoch time UTC (required) */
   private java.time.Instant timestamp;
  /** The datetime of when the error occured, in GMT (required) */
   private java.lang.CharSequence event_datetime;
  /** Unique id for event tracing (required) */
   private java.lang.CharSequence correlation_id;
  /** Environment where the error took place (optional) */
   private java.lang.CharSequence environment_id;
  /** Application where the error took place (optional) */
   private java.lang.CharSequence application_id;
  /** Instance where the error took place (optional) */
   private java.lang.CharSequence instance_id;
   private io.firkin.kstreams.normalizer.errors.v1.avsc.Environments environment;
  /** Error information from the application */
   private java.lang.CharSequence exception;
  /** Metadata from the source system (optional) */
   private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> metadata;
  /** Data from the source system (optional) */
   private java.nio.ByteBuffer data;
  /** Metadata from the Kafka Record (required) */
   private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> kafka_metadata;
  /** The Record responsible for the error (required) */
   private java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> kafka_record;
  /** Schema of the Record (required) */
   private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> kafka_schema;
  /** Additional data from Kafka (required) */
   private java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> kafka_data;
  /** Additional metadata from related systems (required) */
   private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> related_metadata;
  /** Additional data from related systems (required) */
   private java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> related_data;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public NormalizedError() {}

  /**
   * All-args constructor.
   * @param timestamp The timestamp of when the error occurred, in Unix epoch time UTC (required)
   * @param event_datetime The datetime of when the error occured, in GMT (required)
   * @param correlation_id Unique id for event tracing (required)
   * @param environment_id Environment where the error took place (optional)
   * @param application_id Application where the error took place (optional)
   * @param instance_id Instance where the error took place (optional)
   * @param environment The new value for environment
   * @param exception Error information from the application
   * @param metadata Metadata from the source system (optional)
   * @param data Data from the source system (optional)
   * @param kafka_metadata Metadata from the Kafka Record (required)
   * @param kafka_record The Record responsible for the error (required)
   * @param kafka_schema Schema of the Record (required)
   * @param kafka_data Additional data from Kafka (required)
   * @param related_metadata Additional metadata from related systems (required)
   * @param related_data Additional data from related systems (required)
   */
  public NormalizedError(java.time.Instant timestamp, java.lang.CharSequence event_datetime, java.lang.CharSequence correlation_id, java.lang.CharSequence environment_id, java.lang.CharSequence application_id, java.lang.CharSequence instance_id, io.firkin.kstreams.normalizer.errors.v1.avsc.Environments environment, java.lang.CharSequence exception, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> metadata, java.nio.ByteBuffer data, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> kafka_metadata, java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> kafka_record, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> kafka_schema, java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> kafka_data, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> related_metadata, java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> related_data) {
    this.timestamp = timestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.event_datetime = event_datetime;
    this.correlation_id = correlation_id;
    this.environment_id = environment_id;
    this.application_id = application_id;
    this.instance_id = instance_id;
    this.environment = environment;
    this.exception = exception;
    this.metadata = metadata;
    this.data = data;
    this.kafka_metadata = kafka_metadata;
    this.kafka_record = kafka_record;
    this.kafka_schema = kafka_schema;
    this.kafka_data = kafka_data;
    this.related_metadata = related_metadata;
    this.related_data = related_data;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timestamp;
    case 1: return event_datetime;
    case 2: return correlation_id;
    case 3: return environment_id;
    case 4: return application_id;
    case 5: return instance_id;
    case 6: return environment;
    case 7: return exception;
    case 8: return metadata;
    case 9: return data;
    case 10: return kafka_metadata;
    case 11: return kafka_record;
    case 12: return kafka_schema;
    case 13: return kafka_data;
    case 14: return related_metadata;
    case 15: return related_data;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timestamp = (java.time.Instant)value$; break;
    case 1: event_datetime = (java.lang.CharSequence)value$; break;
    case 2: correlation_id = (java.lang.CharSequence)value$; break;
    case 3: environment_id = (java.lang.CharSequence)value$; break;
    case 4: application_id = (java.lang.CharSequence)value$; break;
    case 5: instance_id = (java.lang.CharSequence)value$; break;
    case 6: environment = (io.firkin.kstreams.normalizer.errors.v1.avsc.Environments)value$; break;
    case 7: exception = (java.lang.CharSequence)value$; break;
    case 8: metadata = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 9: data = (java.nio.ByteBuffer)value$; break;
    case 10: kafka_metadata = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 11: kafka_record = (java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer>)value$; break;
    case 12: kafka_schema = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 13: kafka_data = (java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer>)value$; break;
    case 14: related_metadata = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 15: related_data = (java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The timestamp of when the error occurred, in Unix epoch time UTC (required)
   */
  public java.time.Instant getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * The timestamp of when the error occurred, in Unix epoch time UTC (required)
   * @param value the value to set.
   */
  public void setTimestamp(java.time.Instant value) {
    this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'event_datetime' field.
   * @return The datetime of when the error occured, in GMT (required)
   */
  public java.lang.CharSequence getEventDatetime() {
    return event_datetime;
  }


  /**
   * Sets the value of the 'event_datetime' field.
   * The datetime of when the error occured, in GMT (required)
   * @param value the value to set.
   */
  public void setEventDatetime(java.lang.CharSequence value) {
    this.event_datetime = value;
  }

  /**
   * Gets the value of the 'correlation_id' field.
   * @return Unique id for event tracing (required)
   */
  public java.lang.CharSequence getCorrelationId() {
    return correlation_id;
  }


  /**
   * Sets the value of the 'correlation_id' field.
   * Unique id for event tracing (required)
   * @param value the value to set.
   */
  public void setCorrelationId(java.lang.CharSequence value) {
    this.correlation_id = value;
  }

  /**
   * Gets the value of the 'environment_id' field.
   * @return Environment where the error took place (optional)
   */
  public java.lang.CharSequence getEnvironmentId() {
    return environment_id;
  }


  /**
   * Sets the value of the 'environment_id' field.
   * Environment where the error took place (optional)
   * @param value the value to set.
   */
  public void setEnvironmentId(java.lang.CharSequence value) {
    this.environment_id = value;
  }

  /**
   * Gets the value of the 'application_id' field.
   * @return Application where the error took place (optional)
   */
  public java.lang.CharSequence getApplicationId() {
    return application_id;
  }


  /**
   * Sets the value of the 'application_id' field.
   * Application where the error took place (optional)
   * @param value the value to set.
   */
  public void setApplicationId(java.lang.CharSequence value) {
    this.application_id = value;
  }

  /**
   * Gets the value of the 'instance_id' field.
   * @return Instance where the error took place (optional)
   */
  public java.lang.CharSequence getInstanceId() {
    return instance_id;
  }


  /**
   * Sets the value of the 'instance_id' field.
   * Instance where the error took place (optional)
   * @param value the value to set.
   */
  public void setInstanceId(java.lang.CharSequence value) {
    this.instance_id = value;
  }

  /**
   * Gets the value of the 'environment' field.
   * @return The value of the 'environment' field.
   */
  public io.firkin.kstreams.normalizer.errors.v1.avsc.Environments getEnvironment() {
    return environment;
  }


  /**
   * Sets the value of the 'environment' field.
   * @param value the value to set.
   */
  public void setEnvironment(io.firkin.kstreams.normalizer.errors.v1.avsc.Environments value) {
    this.environment = value;
  }

  /**
   * Gets the value of the 'exception' field.
   * @return Error information from the application
   */
  public java.lang.CharSequence getException() {
    return exception;
  }


  /**
   * Sets the value of the 'exception' field.
   * Error information from the application
   * @param value the value to set.
   */
  public void setException(java.lang.CharSequence value) {
    this.exception = value;
  }

  /**
   * Gets the value of the 'metadata' field.
   * @return Metadata from the source system (optional)
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getMetadata() {
    return metadata;
  }


  /**
   * Sets the value of the 'metadata' field.
   * Metadata from the source system (optional)
   * @param value the value to set.
   */
  public void setMetadata(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.metadata = value;
  }

  /**
   * Gets the value of the 'data' field.
   * @return Data from the source system (optional)
   */
  public java.nio.ByteBuffer getData() {
    return data;
  }


  /**
   * Sets the value of the 'data' field.
   * Data from the source system (optional)
   * @param value the value to set.
   */
  public void setData(java.nio.ByteBuffer value) {
    this.data = value;
  }

  /**
   * Gets the value of the 'kafka_metadata' field.
   * @return Metadata from the Kafka Record (required)
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getKafkaMetadata() {
    return kafka_metadata;
  }


  /**
   * Sets the value of the 'kafka_metadata' field.
   * Metadata from the Kafka Record (required)
   * @param value the value to set.
   */
  public void setKafkaMetadata(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.kafka_metadata = value;
  }

  /**
   * Gets the value of the 'kafka_record' field.
   * @return The Record responsible for the error (required)
   */
  public java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> getKafkaRecord() {
    return kafka_record;
  }


  /**
   * Sets the value of the 'kafka_record' field.
   * The Record responsible for the error (required)
   * @param value the value to set.
   */
  public void setKafkaRecord(java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> value) {
    this.kafka_record = value;
  }

  /**
   * Gets the value of the 'kafka_schema' field.
   * @return Schema of the Record (required)
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getKafkaSchema() {
    return kafka_schema;
  }


  /**
   * Sets the value of the 'kafka_schema' field.
   * Schema of the Record (required)
   * @param value the value to set.
   */
  public void setKafkaSchema(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.kafka_schema = value;
  }

  /**
   * Gets the value of the 'kafka_data' field.
   * @return Additional data from Kafka (required)
   */
  public java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> getKafkaData() {
    return kafka_data;
  }


  /**
   * Sets the value of the 'kafka_data' field.
   * Additional data from Kafka (required)
   * @param value the value to set.
   */
  public void setKafkaData(java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> value) {
    this.kafka_data = value;
  }

  /**
   * Gets the value of the 'related_metadata' field.
   * @return Additional metadata from related systems (required)
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getRelatedMetadata() {
    return related_metadata;
  }


  /**
   * Sets the value of the 'related_metadata' field.
   * Additional metadata from related systems (required)
   * @param value the value to set.
   */
  public void setRelatedMetadata(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.related_metadata = value;
  }

  /**
   * Gets the value of the 'related_data' field.
   * @return Additional data from related systems (required)
   */
  public java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> getRelatedData() {
    return related_data;
  }


  /**
   * Sets the value of the 'related_data' field.
   * Additional data from related systems (required)
   * @param value the value to set.
   */
  public void setRelatedData(java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> value) {
    this.related_data = value;
  }

  /**
   * Creates a new NormalizedError RecordBuilder.
   * @return A new NormalizedError RecordBuilder
   */
  public static io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder newBuilder() {
    return new io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder();
  }

  /**
   * Creates a new NormalizedError RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new NormalizedError RecordBuilder
   */
  public static io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder newBuilder(io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder other) {
    if (other == null) {
      return new io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder();
    } else {
      return new io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder(other);
    }
  }

  /**
   * Creates a new NormalizedError RecordBuilder by copying an existing NormalizedError instance.
   * @param other The existing instance to copy.
   * @return A new NormalizedError RecordBuilder
   */
  public static io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder newBuilder(io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError other) {
    if (other == null) {
      return new io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder();
    } else {
      return new io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder(other);
    }
  }

  /**
   * RecordBuilder for NormalizedError instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NormalizedError>
    implements org.apache.avro.data.RecordBuilder<NormalizedError> {

    /** The timestamp of when the error occurred, in Unix epoch time UTC (required) */
    private java.time.Instant timestamp;
    /** The datetime of when the error occured, in GMT (required) */
    private java.lang.CharSequence event_datetime;
    /** Unique id for event tracing (required) */
    private java.lang.CharSequence correlation_id;
    /** Environment where the error took place (optional) */
    private java.lang.CharSequence environment_id;
    /** Application where the error took place (optional) */
    private java.lang.CharSequence application_id;
    /** Instance where the error took place (optional) */
    private java.lang.CharSequence instance_id;
    private io.firkin.kstreams.normalizer.errors.v1.avsc.Environments environment;
    /** Error information from the application */
    private java.lang.CharSequence exception;
    /** Metadata from the source system (optional) */
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> metadata;
    /** Data from the source system (optional) */
    private java.nio.ByteBuffer data;
    /** Metadata from the Kafka Record (required) */
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> kafka_metadata;
    /** The Record responsible for the error (required) */
    private java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> kafka_record;
    /** Schema of the Record (required) */
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> kafka_schema;
    /** Additional data from Kafka (required) */
    private java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> kafka_data;
    /** Additional metadata from related systems (required) */
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> related_metadata;
    /** Additional data from related systems (required) */
    private java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> related_data;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.event_datetime)) {
        this.event_datetime = data().deepCopy(fields()[1].schema(), other.event_datetime);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.correlation_id)) {
        this.correlation_id = data().deepCopy(fields()[2].schema(), other.correlation_id);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.environment_id)) {
        this.environment_id = data().deepCopy(fields()[3].schema(), other.environment_id);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.application_id)) {
        this.application_id = data().deepCopy(fields()[4].schema(), other.application_id);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.instance_id)) {
        this.instance_id = data().deepCopy(fields()[5].schema(), other.instance_id);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.environment)) {
        this.environment = data().deepCopy(fields()[6].schema(), other.environment);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.exception)) {
        this.exception = data().deepCopy(fields()[7].schema(), other.exception);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.metadata)) {
        this.metadata = data().deepCopy(fields()[8].schema(), other.metadata);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.data)) {
        this.data = data().deepCopy(fields()[9].schema(), other.data);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.kafka_metadata)) {
        this.kafka_metadata = data().deepCopy(fields()[10].schema(), other.kafka_metadata);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.kafka_record)) {
        this.kafka_record = data().deepCopy(fields()[11].schema(), other.kafka_record);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.kafka_schema)) {
        this.kafka_schema = data().deepCopy(fields()[12].schema(), other.kafka_schema);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.kafka_data)) {
        this.kafka_data = data().deepCopy(fields()[13].schema(), other.kafka_data);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.related_metadata)) {
        this.related_metadata = data().deepCopy(fields()[14].schema(), other.related_metadata);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.related_data)) {
        this.related_data = data().deepCopy(fields()[15].schema(), other.related_data);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
    }

    /**
     * Creates a Builder by copying an existing NormalizedError instance
     * @param other The existing instance to copy.
     */
    private Builder(io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.event_datetime)) {
        this.event_datetime = data().deepCopy(fields()[1].schema(), other.event_datetime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.correlation_id)) {
        this.correlation_id = data().deepCopy(fields()[2].schema(), other.correlation_id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.environment_id)) {
        this.environment_id = data().deepCopy(fields()[3].schema(), other.environment_id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.application_id)) {
        this.application_id = data().deepCopy(fields()[4].schema(), other.application_id);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.instance_id)) {
        this.instance_id = data().deepCopy(fields()[5].schema(), other.instance_id);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.environment)) {
        this.environment = data().deepCopy(fields()[6].schema(), other.environment);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.exception)) {
        this.exception = data().deepCopy(fields()[7].schema(), other.exception);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.metadata)) {
        this.metadata = data().deepCopy(fields()[8].schema(), other.metadata);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.data)) {
        this.data = data().deepCopy(fields()[9].schema(), other.data);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.kafka_metadata)) {
        this.kafka_metadata = data().deepCopy(fields()[10].schema(), other.kafka_metadata);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.kafka_record)) {
        this.kafka_record = data().deepCopy(fields()[11].schema(), other.kafka_record);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.kafka_schema)) {
        this.kafka_schema = data().deepCopy(fields()[12].schema(), other.kafka_schema);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.kafka_data)) {
        this.kafka_data = data().deepCopy(fields()[13].schema(), other.kafka_data);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.related_metadata)) {
        this.related_metadata = data().deepCopy(fields()[14].schema(), other.related_metadata);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.related_data)) {
        this.related_data = data().deepCopy(fields()[15].schema(), other.related_data);
        fieldSetFlags()[15] = true;
      }
    }

    /**
      * Gets the value of the 'timestamp' field.
      * The timestamp of when the error occurred, in Unix epoch time UTC (required)
      * @return The value.
      */
    public java.time.Instant getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * The timestamp of when the error occurred, in Unix epoch time UTC (required)
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder setTimestamp(java.time.Instant value) {
      validate(fields()[0], value);
      this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * The timestamp of when the error occurred, in Unix epoch time UTC (required)
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * The timestamp of when the error occurred, in Unix epoch time UTC (required)
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder clearTimestamp() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'event_datetime' field.
      * The datetime of when the error occured, in GMT (required)
      * @return The value.
      */
    public java.lang.CharSequence getEventDatetime() {
      return event_datetime;
    }


    /**
      * Sets the value of the 'event_datetime' field.
      * The datetime of when the error occured, in GMT (required)
      * @param value The value of 'event_datetime'.
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder setEventDatetime(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.event_datetime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'event_datetime' field has been set.
      * The datetime of when the error occured, in GMT (required)
      * @return True if the 'event_datetime' field has been set, false otherwise.
      */
    public boolean hasEventDatetime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'event_datetime' field.
      * The datetime of when the error occured, in GMT (required)
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder clearEventDatetime() {
      event_datetime = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'correlation_id' field.
      * Unique id for event tracing (required)
      * @return The value.
      */
    public java.lang.CharSequence getCorrelationId() {
      return correlation_id;
    }


    /**
      * Sets the value of the 'correlation_id' field.
      * Unique id for event tracing (required)
      * @param value The value of 'correlation_id'.
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder setCorrelationId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.correlation_id = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'correlation_id' field has been set.
      * Unique id for event tracing (required)
      * @return True if the 'correlation_id' field has been set, false otherwise.
      */
    public boolean hasCorrelationId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'correlation_id' field.
      * Unique id for event tracing (required)
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder clearCorrelationId() {
      correlation_id = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'environment_id' field.
      * Environment where the error took place (optional)
      * @return The value.
      */
    public java.lang.CharSequence getEnvironmentId() {
      return environment_id;
    }


    /**
      * Sets the value of the 'environment_id' field.
      * Environment where the error took place (optional)
      * @param value The value of 'environment_id'.
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder setEnvironmentId(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.environment_id = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'environment_id' field has been set.
      * Environment where the error took place (optional)
      * @return True if the 'environment_id' field has been set, false otherwise.
      */
    public boolean hasEnvironmentId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'environment_id' field.
      * Environment where the error took place (optional)
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder clearEnvironmentId() {
      environment_id = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'application_id' field.
      * Application where the error took place (optional)
      * @return The value.
      */
    public java.lang.CharSequence getApplicationId() {
      return application_id;
    }


    /**
      * Sets the value of the 'application_id' field.
      * Application where the error took place (optional)
      * @param value The value of 'application_id'.
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder setApplicationId(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.application_id = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'application_id' field has been set.
      * Application where the error took place (optional)
      * @return True if the 'application_id' field has been set, false otherwise.
      */
    public boolean hasApplicationId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'application_id' field.
      * Application where the error took place (optional)
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder clearApplicationId() {
      application_id = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'instance_id' field.
      * Instance where the error took place (optional)
      * @return The value.
      */
    public java.lang.CharSequence getInstanceId() {
      return instance_id;
    }


    /**
      * Sets the value of the 'instance_id' field.
      * Instance where the error took place (optional)
      * @param value The value of 'instance_id'.
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder setInstanceId(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.instance_id = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'instance_id' field has been set.
      * Instance where the error took place (optional)
      * @return True if the 'instance_id' field has been set, false otherwise.
      */
    public boolean hasInstanceId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'instance_id' field.
      * Instance where the error took place (optional)
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder clearInstanceId() {
      instance_id = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'environment' field.
      * @return The value.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avsc.Environments getEnvironment() {
      return environment;
    }


    /**
      * Sets the value of the 'environment' field.
      * @param value The value of 'environment'.
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder setEnvironment(io.firkin.kstreams.normalizer.errors.v1.avsc.Environments value) {
      validate(fields()[6], value);
      this.environment = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'environment' field has been set.
      * @return True if the 'environment' field has been set, false otherwise.
      */
    public boolean hasEnvironment() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'environment' field.
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder clearEnvironment() {
      environment = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'exception' field.
      * Error information from the application
      * @return The value.
      */
    public java.lang.CharSequence getException() {
      return exception;
    }


    /**
      * Sets the value of the 'exception' field.
      * Error information from the application
      * @param value The value of 'exception'.
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder setException(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.exception = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'exception' field has been set.
      * Error information from the application
      * @return True if the 'exception' field has been set, false otherwise.
      */
    public boolean hasException() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'exception' field.
      * Error information from the application
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder clearException() {
      exception = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'metadata' field.
      * Metadata from the source system (optional)
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getMetadata() {
      return metadata;
    }


    /**
      * Sets the value of the 'metadata' field.
      * Metadata from the source system (optional)
      * @param value The value of 'metadata'.
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder setMetadata(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[8], value);
      this.metadata = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'metadata' field has been set.
      * Metadata from the source system (optional)
      * @return True if the 'metadata' field has been set, false otherwise.
      */
    public boolean hasMetadata() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'metadata' field.
      * Metadata from the source system (optional)
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder clearMetadata() {
      metadata = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'data' field.
      * Data from the source system (optional)
      * @return The value.
      */
    public java.nio.ByteBuffer getData() {
      return data;
    }


    /**
      * Sets the value of the 'data' field.
      * Data from the source system (optional)
      * @param value The value of 'data'.
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder setData(java.nio.ByteBuffer value) {
      validate(fields()[9], value);
      this.data = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'data' field has been set.
      * Data from the source system (optional)
      * @return True if the 'data' field has been set, false otherwise.
      */
    public boolean hasData() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'data' field.
      * Data from the source system (optional)
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder clearData() {
      data = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'kafka_metadata' field.
      * Metadata from the Kafka Record (required)
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getKafkaMetadata() {
      return kafka_metadata;
    }


    /**
      * Sets the value of the 'kafka_metadata' field.
      * Metadata from the Kafka Record (required)
      * @param value The value of 'kafka_metadata'.
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder setKafkaMetadata(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[10], value);
      this.kafka_metadata = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'kafka_metadata' field has been set.
      * Metadata from the Kafka Record (required)
      * @return True if the 'kafka_metadata' field has been set, false otherwise.
      */
    public boolean hasKafkaMetadata() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'kafka_metadata' field.
      * Metadata from the Kafka Record (required)
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder clearKafkaMetadata() {
      kafka_metadata = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'kafka_record' field.
      * The Record responsible for the error (required)
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> getKafkaRecord() {
      return kafka_record;
    }


    /**
      * Sets the value of the 'kafka_record' field.
      * The Record responsible for the error (required)
      * @param value The value of 'kafka_record'.
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder setKafkaRecord(java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> value) {
      validate(fields()[11], value);
      this.kafka_record = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'kafka_record' field has been set.
      * The Record responsible for the error (required)
      * @return True if the 'kafka_record' field has been set, false otherwise.
      */
    public boolean hasKafkaRecord() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'kafka_record' field.
      * The Record responsible for the error (required)
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder clearKafkaRecord() {
      kafka_record = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'kafka_schema' field.
      * Schema of the Record (required)
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getKafkaSchema() {
      return kafka_schema;
    }


    /**
      * Sets the value of the 'kafka_schema' field.
      * Schema of the Record (required)
      * @param value The value of 'kafka_schema'.
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder setKafkaSchema(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[12], value);
      this.kafka_schema = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'kafka_schema' field has been set.
      * Schema of the Record (required)
      * @return True if the 'kafka_schema' field has been set, false otherwise.
      */
    public boolean hasKafkaSchema() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'kafka_schema' field.
      * Schema of the Record (required)
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder clearKafkaSchema() {
      kafka_schema = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'kafka_data' field.
      * Additional data from Kafka (required)
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> getKafkaData() {
      return kafka_data;
    }


    /**
      * Sets the value of the 'kafka_data' field.
      * Additional data from Kafka (required)
      * @param value The value of 'kafka_data'.
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder setKafkaData(java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> value) {
      validate(fields()[13], value);
      this.kafka_data = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'kafka_data' field has been set.
      * Additional data from Kafka (required)
      * @return True if the 'kafka_data' field has been set, false otherwise.
      */
    public boolean hasKafkaData() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'kafka_data' field.
      * Additional data from Kafka (required)
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder clearKafkaData() {
      kafka_data = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'related_metadata' field.
      * Additional metadata from related systems (required)
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getRelatedMetadata() {
      return related_metadata;
    }


    /**
      * Sets the value of the 'related_metadata' field.
      * Additional metadata from related systems (required)
      * @param value The value of 'related_metadata'.
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder setRelatedMetadata(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[14], value);
      this.related_metadata = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'related_metadata' field has been set.
      * Additional metadata from related systems (required)
      * @return True if the 'related_metadata' field has been set, false otherwise.
      */
    public boolean hasRelatedMetadata() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'related_metadata' field.
      * Additional metadata from related systems (required)
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder clearRelatedMetadata() {
      related_metadata = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'related_data' field.
      * Additional data from related systems (required)
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> getRelatedData() {
      return related_data;
    }


    /**
      * Sets the value of the 'related_data' field.
      * Additional data from related systems (required)
      * @param value The value of 'related_data'.
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder setRelatedData(java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer> value) {
      validate(fields()[15], value);
      this.related_data = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'related_data' field has been set.
      * Additional data from related systems (required)
      * @return True if the 'related_data' field has been set, false otherwise.
      */
    public boolean hasRelatedData() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'related_data' field.
      * Additional data from related systems (required)
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avsc.NormalizedError.Builder clearRelatedData() {
      related_data = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public NormalizedError build() {
      try {
        NormalizedError record = new NormalizedError();
        record.timestamp = fieldSetFlags()[0] ? this.timestamp : (java.time.Instant) defaultValue(fields()[0]);
        record.event_datetime = fieldSetFlags()[1] ? this.event_datetime : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.correlation_id = fieldSetFlags()[2] ? this.correlation_id : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.environment_id = fieldSetFlags()[3] ? this.environment_id : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.application_id = fieldSetFlags()[4] ? this.application_id : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.instance_id = fieldSetFlags()[5] ? this.instance_id : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.environment = fieldSetFlags()[6] ? this.environment : (io.firkin.kstreams.normalizer.errors.v1.avsc.Environments) defaultValue(fields()[6]);
        record.exception = fieldSetFlags()[7] ? this.exception : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.metadata = fieldSetFlags()[8] ? this.metadata : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[8]);
        record.data = fieldSetFlags()[9] ? this.data : (java.nio.ByteBuffer) defaultValue(fields()[9]);
        record.kafka_metadata = fieldSetFlags()[10] ? this.kafka_metadata : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[10]);
        record.kafka_record = fieldSetFlags()[11] ? this.kafka_record : (java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer>) defaultValue(fields()[11]);
        record.kafka_schema = fieldSetFlags()[12] ? this.kafka_schema : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[12]);
        record.kafka_data = fieldSetFlags()[13] ? this.kafka_data : (java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer>) defaultValue(fields()[13]);
        record.related_metadata = fieldSetFlags()[14] ? this.related_metadata : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[14]);
        record.related_data = fieldSetFlags()[15] ? this.related_data : (java.util.Map<java.lang.CharSequence,java.nio.ByteBuffer>) defaultValue(fields()[15]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<NormalizedError>
    WRITER$ = (org.apache.avro.io.DatumWriter<NormalizedError>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<NormalizedError>
    READER$ = (org.apache.avro.io.DatumReader<NormalizedError>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










