/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.firkin.kstreams.normalizer.errors.v1.avdl;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** * An object capturing information about the source of the error. */
@org.apache.avro.specific.AvroGenerated
public class SystemInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4221899939089380881L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SystemInfo\",\"namespace\":\"io.firkin.kstreams.normalizer.errors.v1.avdl\",\"doc\":\"* An object capturing information about the source of the error.\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"name\",\"type\":\"string\",\"default\":\"unnamed\"},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"url\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"environmentId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"applicationId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"instanceId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"tags\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SystemInfo> ENCODER =
      new BinaryMessageEncoder<SystemInfo>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SystemInfo> DECODER =
      new BinaryMessageDecoder<SystemInfo>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SystemInfo> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SystemInfo> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SystemInfo> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<SystemInfo>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SystemInfo to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SystemInfo from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SystemInfo instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SystemInfo fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence id;
   private java.lang.CharSequence name;
   private java.lang.CharSequence description;
   private java.lang.CharSequence url;
   private java.lang.CharSequence environmentId;
   private java.lang.CharSequence applicationId;
   private java.lang.CharSequence instanceId;
   private java.util.List<java.lang.CharSequence> tags;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SystemInfo() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param name The new value for name
   * @param description The new value for description
   * @param url The new value for url
   * @param environmentId The new value for environmentId
   * @param applicationId The new value for applicationId
   * @param instanceId The new value for instanceId
   * @param tags The new value for tags
   */
  public SystemInfo(java.lang.CharSequence id, java.lang.CharSequence name, java.lang.CharSequence description, java.lang.CharSequence url, java.lang.CharSequence environmentId, java.lang.CharSequence applicationId, java.lang.CharSequence instanceId, java.util.List<java.lang.CharSequence> tags) {
    this.id = id;
    this.name = name;
    this.description = description;
    this.url = url;
    this.environmentId = environmentId;
    this.applicationId = applicationId;
    this.instanceId = instanceId;
    this.tags = tags;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return description;
    case 3: return url;
    case 4: return environmentId;
    case 5: return applicationId;
    case 6: return instanceId;
    case 7: return tags;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: description = (java.lang.CharSequence)value$; break;
    case 3: url = (java.lang.CharSequence)value$; break;
    case 4: environmentId = (java.lang.CharSequence)value$; break;
    case 5: applicationId = (java.lang.CharSequence)value$; break;
    case 6: instanceId = (java.lang.CharSequence)value$; break;
    case 7: tags = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public java.lang.CharSequence getDescription() {
    return description;
  }


  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'url' field.
   * @return The value of the 'url' field.
   */
  public java.lang.CharSequence getUrl() {
    return url;
  }


  /**
   * Sets the value of the 'url' field.
   * @param value the value to set.
   */
  public void setUrl(java.lang.CharSequence value) {
    this.url = value;
  }

  /**
   * Gets the value of the 'environmentId' field.
   * @return The value of the 'environmentId' field.
   */
  public java.lang.CharSequence getEnvironmentId() {
    return environmentId;
  }


  /**
   * Sets the value of the 'environmentId' field.
   * @param value the value to set.
   */
  public void setEnvironmentId(java.lang.CharSequence value) {
    this.environmentId = value;
  }

  /**
   * Gets the value of the 'applicationId' field.
   * @return The value of the 'applicationId' field.
   */
  public java.lang.CharSequence getApplicationId() {
    return applicationId;
  }


  /**
   * Sets the value of the 'applicationId' field.
   * @param value the value to set.
   */
  public void setApplicationId(java.lang.CharSequence value) {
    this.applicationId = value;
  }

  /**
   * Gets the value of the 'instanceId' field.
   * @return The value of the 'instanceId' field.
   */
  public java.lang.CharSequence getInstanceId() {
    return instanceId;
  }


  /**
   * Sets the value of the 'instanceId' field.
   * @param value the value to set.
   */
  public void setInstanceId(java.lang.CharSequence value) {
    this.instanceId = value;
  }

  /**
   * Gets the value of the 'tags' field.
   * @return The value of the 'tags' field.
   */
  public java.util.List<java.lang.CharSequence> getTags() {
    return tags;
  }


  /**
   * Sets the value of the 'tags' field.
   * @param value the value to set.
   */
  public void setTags(java.util.List<java.lang.CharSequence> value) {
    this.tags = value;
  }

  /**
   * Creates a new SystemInfo RecordBuilder.
   * @return A new SystemInfo RecordBuilder
   */
  public static io.firkin.kstreams.normalizer.errors.v1.avdl.SystemInfo.Builder newBuilder() {
    return new io.firkin.kstreams.normalizer.errors.v1.avdl.SystemInfo.Builder();
  }

  /**
   * Creates a new SystemInfo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SystemInfo RecordBuilder
   */
  public static io.firkin.kstreams.normalizer.errors.v1.avdl.SystemInfo.Builder newBuilder(io.firkin.kstreams.normalizer.errors.v1.avdl.SystemInfo.Builder other) {
    if (other == null) {
      return new io.firkin.kstreams.normalizer.errors.v1.avdl.SystemInfo.Builder();
    } else {
      return new io.firkin.kstreams.normalizer.errors.v1.avdl.SystemInfo.Builder(other);
    }
  }

  /**
   * Creates a new SystemInfo RecordBuilder by copying an existing SystemInfo instance.
   * @param other The existing instance to copy.
   * @return A new SystemInfo RecordBuilder
   */
  public static io.firkin.kstreams.normalizer.errors.v1.avdl.SystemInfo.Builder newBuilder(io.firkin.kstreams.normalizer.errors.v1.avdl.SystemInfo other) {
    if (other == null) {
      return new io.firkin.kstreams.normalizer.errors.v1.avdl.SystemInfo.Builder();
    } else {
      return new io.firkin.kstreams.normalizer.errors.v1.avdl.SystemInfo.Builder(other);
    }
  }

  /**
   * RecordBuilder for SystemInfo instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SystemInfo>
    implements org.apache.avro.data.RecordBuilder<SystemInfo> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence name;
    private java.lang.CharSequence description;
    private java.lang.CharSequence url;
    private java.lang.CharSequence environmentId;
    private java.lang.CharSequence applicationId;
    private java.lang.CharSequence instanceId;
    private java.util.List<java.lang.CharSequence> tags;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.firkin.kstreams.normalizer.errors.v1.avdl.SystemInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.url)) {
        this.url = data().deepCopy(fields()[3].schema(), other.url);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.environmentId)) {
        this.environmentId = data().deepCopy(fields()[4].schema(), other.environmentId);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.applicationId)) {
        this.applicationId = data().deepCopy(fields()[5].schema(), other.applicationId);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.instanceId)) {
        this.instanceId = data().deepCopy(fields()[6].schema(), other.instanceId);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.tags)) {
        this.tags = data().deepCopy(fields()[7].schema(), other.tags);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing SystemInfo instance
     * @param other The existing instance to copy.
     */
    private Builder(io.firkin.kstreams.normalizer.errors.v1.avdl.SystemInfo other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.url)) {
        this.url = data().deepCopy(fields()[3].schema(), other.url);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.environmentId)) {
        this.environmentId = data().deepCopy(fields()[4].schema(), other.environmentId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.applicationId)) {
        this.applicationId = data().deepCopy(fields()[5].schema(), other.applicationId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.instanceId)) {
        this.instanceId = data().deepCopy(fields()[6].schema(), other.instanceId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.tags)) {
        this.tags = data().deepCopy(fields()[7].schema(), other.tags);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avdl.SystemInfo.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avdl.SystemInfo.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avdl.SystemInfo.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avdl.SystemInfo.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public java.lang.CharSequence getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avdl.SystemInfo.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.description = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avdl.SystemInfo.Builder clearDescription() {
      description = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'url' field.
      * @return The value.
      */
    public java.lang.CharSequence getUrl() {
      return url;
    }


    /**
      * Sets the value of the 'url' field.
      * @param value The value of 'url'.
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avdl.SystemInfo.Builder setUrl(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.url = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'url' field has been set.
      * @return True if the 'url' field has been set, false otherwise.
      */
    public boolean hasUrl() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'url' field.
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avdl.SystemInfo.Builder clearUrl() {
      url = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'environmentId' field.
      * @return The value.
      */
    public java.lang.CharSequence getEnvironmentId() {
      return environmentId;
    }


    /**
      * Sets the value of the 'environmentId' field.
      * @param value The value of 'environmentId'.
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avdl.SystemInfo.Builder setEnvironmentId(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.environmentId = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'environmentId' field has been set.
      * @return True if the 'environmentId' field has been set, false otherwise.
      */
    public boolean hasEnvironmentId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'environmentId' field.
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avdl.SystemInfo.Builder clearEnvironmentId() {
      environmentId = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'applicationId' field.
      * @return The value.
      */
    public java.lang.CharSequence getApplicationId() {
      return applicationId;
    }


    /**
      * Sets the value of the 'applicationId' field.
      * @param value The value of 'applicationId'.
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avdl.SystemInfo.Builder setApplicationId(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.applicationId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'applicationId' field has been set.
      * @return True if the 'applicationId' field has been set, false otherwise.
      */
    public boolean hasApplicationId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'applicationId' field.
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avdl.SystemInfo.Builder clearApplicationId() {
      applicationId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'instanceId' field.
      * @return The value.
      */
    public java.lang.CharSequence getInstanceId() {
      return instanceId;
    }


    /**
      * Sets the value of the 'instanceId' field.
      * @param value The value of 'instanceId'.
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avdl.SystemInfo.Builder setInstanceId(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.instanceId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'instanceId' field has been set.
      * @return True if the 'instanceId' field has been set, false otherwise.
      */
    public boolean hasInstanceId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'instanceId' field.
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avdl.SystemInfo.Builder clearInstanceId() {
      instanceId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'tags' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getTags() {
      return tags;
    }


    /**
      * Sets the value of the 'tags' field.
      * @param value The value of 'tags'.
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avdl.SystemInfo.Builder setTags(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[7], value);
      this.tags = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'tags' field has been set.
      * @return True if the 'tags' field has been set, false otherwise.
      */
    public boolean hasTags() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'tags' field.
      * @return This builder.
      */
    public io.firkin.kstreams.normalizer.errors.v1.avdl.SystemInfo.Builder clearTags() {
      tags = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SystemInfo build() {
      try {
        SystemInfo record = new SystemInfo();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.description = fieldSetFlags()[2] ? this.description : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.url = fieldSetFlags()[3] ? this.url : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.environmentId = fieldSetFlags()[4] ? this.environmentId : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.applicationId = fieldSetFlags()[5] ? this.applicationId : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.instanceId = fieldSetFlags()[6] ? this.instanceId : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.tags = fieldSetFlags()[7] ? this.tags : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SystemInfo>
    WRITER$ = (org.apache.avro.io.DatumWriter<SystemInfo>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SystemInfo>
    READER$ = (org.apache.avro.io.DatumReader<SystemInfo>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










